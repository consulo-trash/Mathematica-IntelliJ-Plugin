/* The following code was generated by JFlex 1.4.3 on 4/2/13 3:53 AM */

package de.halirutan.mathematica.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.halirutan.mathematica.parsing.MathematicaElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/2/13 3:53 AM from the specification file
 * <tt>Mathematica.flex</tt>
 */
class _MathematicaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\40\1\22"+
    "\1\20\1\5\1\21\1\46\1\47\1\2\1\4\1\3\1\41\1\43"+
    "\1\33\1\16\1\30\1\6\1\15\1\11\1\12\1\13\1\13\1\13"+
    "\1\14\1\14\1\14\1\31\1\35\1\36\1\32\1\34\1\44\1\27"+
    "\32\10\1\23\1\50\1\24\1\17\1\37\1\7\32\10\1\25\1\45"+
    "\1\26\1\42\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\4\11\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\3\1\1\2"+
    "\1\45\1\2\1\46\1\47\1\50\1\10\1\0\1\11"+
    "\1\51\1\0\1\52\1\0\1\53\1\15\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\0\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\11"+
    "\3\0\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\0\2\11\1\0\3\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\173"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\173\0\u02e2\0\173\0\173\0\173"+
    "\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a"+
    "\0\u0453\0\u047c\0\u04a5\0\u04ce\0\173\0\173\0\u04f7\0\u0520"+
    "\0\173\0\u0549\0\173\0\u0572\0\u059b\0\173\0\u05c4\0\173"+
    "\0\173\0\173\0\u05ed\0\u0616\0\u063f\0\173\0\u0668\0\u0691"+
    "\0\u06ba\0\173\0\u06e3\0\u070c\0\173\0\u0735\0\173\0\173"+
    "\0\u075e\0\173\0\173\0\173\0\173\0\173\0\173\0\173"+
    "\0\u0787\0\u07b0\0\173\0\173\0\173\0\173\0\u07d9\0\173"+
    "\0\173\0\173\0\173\0\173\0\u0802\0\173\0\173\0\173"+
    "\0\173\0\173\0\173\0\173\0\u082b\0\u0854\0\u087d\0\u08a6"+
    "\0\173\0\173\0\173\0\173\0\173\0\173\0\173\0\173"+
    "\0\173\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u094a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\11\1\14\1\15\2\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\4"+
    "\2\52\1\53\1\54\1\53\44\52\22\55\1\56\25\55"+
    "\1\57\52\0\1\5\52\0\1\60\50\0\1\61\26\0"+
    "\1\62\23\0\2\11\1\63\6\11\41\0\1\12\1\64"+
    "\1\0\5\12\1\65\37\0\1\11\1\0\1\66\1\11"+
    "\46\0\1\16\1\64\1\0\5\16\1\65\1\67\37\0"+
    "\1\16\1\64\1\0\3\16\1\12\1\16\1\65\1\67"+
    "\37\0\1\12\1\64\1\0\5\12\1\65\1\67\37\0"+
    "\1\16\1\64\1\0\5\16\1\65\40\0\1\65\2\0"+
    "\5\65\1\70\63\0\1\71\1\72\24\0\1\73\2\0"+
    "\5\73\2\0\1\74\51\0\1\23\52\0\1\75\54\0"+
    "\1\76\37\0\1\77\10\0\1\100\1\101\1\102\1\103"+
    "\2\0\1\104\44\0\1\105\1\106\1\0\1\107\32\0"+
    "\1\110\13\0\1\111\5\0\1\112\42\0\1\113\1\114"+
    "\1\115\46\0\1\116\1\0\1\117\51\0\1\120\45\0"+
    "\1\121\1\0\1\122\1\0\1\123\30\0\1\124\20\0"+
    "\1\125\43\0\1\126\50\0\1\127\6\0\1\130\51\0"+
    "\1\131\53\0\1\132\51\0\1\133\2\0\2\52\3\0"+
    "\44\52\4\0\1\134\44\0\22\55\1\0\25\55\1\57"+
    "\50\55\1\57\5\0\1\11\2\0\1\11\46\0\1\135"+
    "\1\136\1\0\5\135\1\137\40\0\1\65\1\64\1\0"+
    "\5\65\52\0\1\140\47\0\1\141\64\0\1\142\24\0"+
    "\1\73\2\0\5\73\41\0\1\74\2\0\5\74\62\0"+
    "\1\143\37\0\1\144\10\0\1\145\53\0\1\146\50\0"+
    "\1\147\52\0\1\150\53\0\1\151\14\0\1\152\2\0"+
    "\1\135\2\0\5\135\1\153\40\0\1\135\2\0\5\135"+
    "\1\137\40\0\1\153\2\0\5\153\41\0\1\154\1\0"+
    "\6\154\52\0\1\155\34\0\1\152\2\0\1\153\2\0"+
    "\5\153\41\0\1\154\1\156\6\154\1\157\40\0\1\160"+
    "\2\0\5\160\36\0\1\152\2\0\1\135\1\136\1\0"+
    "\5\135\1\137\40\0\1\157\1\156\6\157\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2501];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\3\1\1\11\13\1\1\11\1\1"+
    "\3\11\14\1\2\11\2\1\1\11\1\1\1\11\2\1"+
    "\1\11\1\1\3\11\1\1\1\0\1\1\1\11\1\0"+
    "\1\1\1\0\1\11\2\1\1\11\1\1\2\11\1\1"+
    "\7\11\1\1\1\0\4\11\1\1\5\11\1\1\7\11"+
    "\1\1\3\0\11\11\1\0\2\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _MathematicaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _MathematicaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 106) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return MathematicaElementTypes.TIMES;
          }
        case 85: break;
        case 21: 
          { return MathematicaElementTypes.DIVIDE;
          }
        case 86: break;
        case 4: 
          { yybegin(YYINITIAL); return MathematicaElementTypes.WHITE_SPACE;
          }
        case 87: break;
        case 16: 
          { return MathematicaElementTypes.LEFT_BRACKET;
          }
        case 88: break;
        case 37: 
          { yybegin(YYINITIAL); return MathematicaElementTypes.STRING_LITERAL_END;
          }
        case 89: break;
        case 69: 
          { return MathematicaElementTypes.UNEQUAL;
          }
        case 90: break;
        case 83: 
          { return MathematicaElementTypes.PUT_APPEND;
          }
        case 91: break;
        case 68: 
          { return MathematicaElementTypes.BLANK_SEQUENCE;
          }
        case 92: break;
        case 50: 
          { return MathematicaElementTypes.TAG_SET;
          }
        case 93: break;
        case 73: 
          { return MathematicaElementTypes.OR;
          }
        case 94: break;
        case 31: 
          { return MathematicaElementTypes.INFIX_CALL;
          }
        case 95: break;
        case 56: 
          { return MathematicaElementTypes.UNSET;
          }
        case 96: break;
        case 55: 
          { return MathematicaElementTypes.RULE_DELAYED;
          }
        case 97: break;
        case 15: 
          { yybegin(IN_STRING); return MathematicaElementTypes.STRING_LITERAL_BEGIN;
          }
        case 98: break;
        case 43: 
          { return MathematicaElementTypes.UP_SET;
          }
        case 99: break;
        case 72: 
          { return MathematicaElementTypes.STRING_EXPRESSION;
          }
        case 100: break;
        case 14: 
          { return MathematicaElementTypes.OUT;
          }
        case 101: break;
        case 5: 
          { return MathematicaElementTypes.LEFT_PAR;
          }
        case 102: break;
        case 44: 
          { return MathematicaElementTypes.SLOT_SEQUENCE;
          }
        case 103: break;
        case 62: 
          { return MathematicaElementTypes.PUT;
          }
        case 104: break;
        case 64: 
          { return MathematicaElementTypes.LESS_EQUAL;
          }
        case 105: break;
        case 28: 
          { return MathematicaElementTypes.BLANK;
          }
        case 106: break;
        case 34: 
          { return MathematicaElementTypes.ALTERNATIVE;
          }
        case 107: break;
        case 47: 
          { return MathematicaElementTypes.REPLACE_ALL;
          }
        case 108: break;
        case 75: 
          { yybegin(YYINITIAL); return MathematicaElementTypes.COMMENT;
          }
        case 109: break;
        case 60: 
          { return MathematicaElementTypes.RULE;
          }
        case 110: break;
        case 76: 
          { return MathematicaElementTypes.REPEATED_NULL;
          }
        case 111: break;
        case 26: 
          { return MathematicaElementTypes.SEMICOLON;
          }
        case 112: break;
        case 1: 
          { return MathematicaElementTypes.COMMENT;
          }
        case 113: break;
        case 13: 
          { return MathematicaElementTypes.SLOT;
          }
        case 114: break;
        case 29: 
          { return MathematicaElementTypes.EXCLAMATION_MARK;
          }
        case 115: break;
        case 24: 
          { return MathematicaElementTypes.MINUS;
          }
        case 116: break;
        case 9: 
          { return MathematicaElementTypes.NUMBER;
          }
        case 117: break;
        case 61: 
          { return MathematicaElementTypes.GREATER_EQUAL;
          }
        case 118: break;
        case 78: 
          { return MathematicaElementTypes.APPLY1;
          }
        case 119: break;
        case 17: 
          { return MathematicaElementTypes.RIGHT_BRACKET;
          }
        case 120: break;
        case 48: 
          { return MathematicaElementTypes.MAP;
          }
        case 121: break;
        case 33: 
          { return MathematicaElementTypes.QUESTION_MARK;
          }
        case 122: break;
        case 19: 
          { return MathematicaElementTypes.RIGHT_BRACE;
          }
        case 123: break;
        case 54: 
          { return MathematicaElementTypes.SET_DELAYED;
          }
        case 124: break;
        case 53: 
          { return MathematicaElementTypes.DOUBLE_COLON;
          }
        case 125: break;
        case 18: 
          { return MathematicaElementTypes.LEFT_BRACE;
          }
        case 126: break;
        case 67: 
          { return MathematicaElementTypes.OPTIONAL;
          }
        case 127: break;
        case 77: 
          { return MathematicaElementTypes.UP_SET_DELAYED;
          }
        case 128: break;
        case 36: 
          { return MathematicaElementTypes.DERIVATIVE;
          }
        case 129: break;
        case 66: 
          { return MathematicaElementTypes.GET;
          }
        case 130: break;
        case 46: 
          { return MathematicaElementTypes.APPLY;
          }
        case 131: break;
        case 45: 
          { return MathematicaElementTypes.PART_BEGIN;
          }
        case 132: break;
        case 27: 
          { return MathematicaElementTypes.LESS;
          }
        case 133: break;
        case 7: 
          { return MathematicaElementTypes.RIGHT_PAR;
          }
        case 134: break;
        case 71: 
          { return MathematicaElementTypes.INCREMENT;
          }
        case 135: break;
        case 51: 
          { return MathematicaElementTypes.DIVIDE_BY;
          }
        case 136: break;
        case 57: 
          { return MathematicaElementTypes.EQUAL;
          }
        case 137: break;
        case 20: 
          { return MathematicaElementTypes.PREFIX_CALL;
          }
        case 138: break;
        case 3: 
          { return MathematicaElementTypes.BAD_CHARACTER;
          }
        case 139: break;
        case 70: 
          { return MathematicaElementTypes.ADD_TO;
          }
        case 140: break;
        case 12: 
          { return MathematicaElementTypes.POWER;
          }
        case 141: break;
        case 22: 
          { return MathematicaElementTypes.COLON;
          }
        case 142: break;
        case 49: 
          { return MathematicaElementTypes.POSTFIX;
          }
        case 143: break;
        case 10: 
          { return MathematicaElementTypes.BACK_TICK;
          }
        case 144: break;
        case 65: 
          { return MathematicaElementTypes.STRING_JOIN;
          }
        case 145: break;
        case 11: 
          { return MathematicaElementTypes.POINT;
          }
        case 146: break;
        case 79: 
          { return MathematicaElementTypes.REPLACE_REPEATED;
          }
        case 147: break;
        case 84: 
          { return MathematicaElementTypes.BLANK_NULL_SEQUENCE;
          }
        case 148: break;
        case 74: 
          { return MathematicaElementTypes.AND;
          }
        case 149: break;
        case 39: 
          { return MathematicaElementTypes.NON_COMMUTATIVE_MULTIPLY;
          }
        case 150: break;
        case 59: 
          { return MathematicaElementTypes.DECREMENT;
          }
        case 151: break;
        case 41: 
          { return MathematicaElementTypes.ACCURACY;
          }
        case 152: break;
        case 25: 
          { return MathematicaElementTypes.GREATER;
          }
        case 153: break;
        case 40: 
          { return MathematicaElementTypes.TIMES_BY;
          }
        case 154: break;
        case 82: 
          { return MathematicaElementTypes.UNSAME_Q;
          }
        case 155: break;
        case 2: 
          { return MathematicaElementTypes.STRING_LITERAL;
          }
        case 156: break;
        case 42: 
          { return MathematicaElementTypes.REPEATED;
          }
        case 157: break;
        case 52: 
          { return MathematicaElementTypes.CONDITION;
          }
        case 158: break;
        case 32: 
          { return MathematicaElementTypes.COMMA;
          }
        case 159: break;
        case 23: 
          { return MathematicaElementTypes.SET;
          }
        case 160: break;
        case 58: 
          { return MathematicaElementTypes.SUBTRACT_FROM;
          }
        case 161: break;
        case 63: 
          { return MathematicaElementTypes.SPAN;
          }
        case 162: break;
        case 8: 
          { return MathematicaElementTypes.IDENTIFIER;
          }
        case 163: break;
        case 80: 
          { return MathematicaElementTypes.MAP_ALL;
          }
        case 164: break;
        case 81: 
          { return MathematicaElementTypes.SAME_Q;
          }
        case 165: break;
        case 30: 
          { return MathematicaElementTypes.PLUS;
          }
        case 166: break;
        case 38: 
          { yybegin(IN_COMMENT); return MathematicaElementTypes.COMMENT;
          }
        case 167: break;
        case 35: 
          { return MathematicaElementTypes.FUNCTION;
          }
        case 168: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
